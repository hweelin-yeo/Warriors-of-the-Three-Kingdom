### Starting build.
# Target: main.mli.depends, tags: { package(str), package(yojson), extension:mli, file:main.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package yojson -package str -modules main.mli > main.mli.depends
# Target: ai.mli.depends, tags: { package(str), package(yojson), extension:mli, file:ai.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package yojson -package str -modules ai.mli > ai.mli.depends
# Target: state.mli.depends, tags: { package(str), package(yojson), extension:mli, file:state.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package yojson -package str -modules state.mli > state.mli.depends
# Target: state.cmi, tags: { package(str), package(yojson), byte, compile, extension:mli, file:state.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package yojson -package str -o state.cmi state.mli
# Target: cards.ml.depends, tags: { package(str), package(yojson), extension:ml, file:cards.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package yojson -package str -modules cards.ml > cards.ml.depends
# Target: ai.cmi, tags: { package(str), package(yojson), byte, compile, extension:mli, file:ai.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package yojson -package str -o ai.cmi ai.mli
# Target: cards.cmo, tags: { package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:cards.cmo, file:cards.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package yojson -package str -o cards.cmo cards.ml
+ ocamlfind ocamlc -c -package yojson -package str -o cards.cmo cards.ml
File "cards.ml", line 20, characters 14-17:
Error: This expression has type string but an expression was expected of type
         int
Command exited with code 2.
# Compilation unsuccessful.
